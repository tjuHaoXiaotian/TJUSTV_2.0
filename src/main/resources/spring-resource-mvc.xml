<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <context:property-placeholder location="classpath:jdbc.properties"/>

    <context:component-scan base-package="cn.edu.tju.scs.**.web" />

    <!-- 开启注解 --><!--添加注解的目的可以使JSON 字符串自动转换成实体类-->
    <mvc:annotation-driven />

    <!--切面-->
    <!--<aop:aspectj-autoproxy/>-->
    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true"/>

    <!--&lt;!&ndash;默认的静态资源的访问（.js .CSS .png），不会被springMVC 框架直接处理,而是递交给了原始的web 容器 tomcat,采用默认的方式处理&ndash;&gt;-->
    <mvc:default-servlet-handler />

    <!-- 静态资源映射 -->
    <!--<mvc:resources mapping="/static/**" location="/WEB-INF/static/"/>-->





    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:order="1">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="contentType" value="text/html"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


    <!-- 控制器异常处理 -->
    <bean id="exceptionHandlerExceptionResolver" class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver">
    </bean>

    <bean class="cn.edu.tju.scs.oauth2.web.exception.DefaultExceptionHandler"/>



     <!--异常处理器 -->
    <!--<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
        <!--<property name="exceptionMappings">-->
            <!--<props>-->
                <!--<prop key="java.lang.Exception">Exception</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<mvc:interceptors>-->
        <!--&lt;!&ndash; 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 &ndash;&gt;-->
        <!--&lt;!&ndash;<bean class="cn.edu.tju.scs.tv.web.interceptor.AuthorizationInterceptor">&ndash;&gt;-->
            <!--&lt;!&ndash;<property name="excludedUrls">&ndash;&gt;-->
                <!--&lt;!&ndash;<list>&ndash;&gt;-->
                    <!--&lt;!&ndash;<value>/login</value>&ndash;&gt;-->
                    <!--&lt;!&ndash;<value>/preLogin</value>&ndash;&gt;-->
                    <!--&lt;!&ndash;<value>/logout</value>&ndash;&gt;-->
                    <!--&lt;!&ndash;<value>.jpg</value>&ndash;&gt;-->
                    <!--&lt;!&ndash;<value>.css</value>&ndash;&gt;-->
                    <!--&lt;!&ndash;<value>.js</value>&ndash;&gt;-->
                    <!--&lt;!&ndash;<value>.woff</value>&ndash;&gt;-->
                    <!--&lt;!&ndash;<value>.woff2</value>&ndash;&gt;-->
                    <!--&lt;!&ndash;<value>.ttf</value>&ndash;&gt;-->
                <!--&lt;!&ndash;</list>&ndash;&gt;-->
            <!--&lt;!&ndash;</property>&ndash;&gt;-->
            <!--&lt;!&ndash;<mvc:interceptor>&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash; 拦截所有URL中包含/user/的请求 &ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;<mvc:mapping path="/users/*"/>&ndash;&gt;-->

            <!--&lt;!&ndash;</mvc:interceptor>&ndash;&gt;-->
        <!--&lt;!&ndash;</bean>&ndash;&gt;-->
        <!--&lt;!&ndash;&lt;!&ndash; 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 &ndash;&gt;&ndash;&gt;-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash; 拦截所有URL中包含/user/的请求 &ndash;&gt;-->
            <!--<mvc:mapping path="/users/*"/>-->
            <!--<bean class="cn.edu.tju.scs.tv.web.interceptor.AuthorizationInterceptor"/>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         <property name="maxUploadSize" value="2048000000"/>
    </bean>

    <import resource="spring-mvc-shiro.xml"/>

</beans>