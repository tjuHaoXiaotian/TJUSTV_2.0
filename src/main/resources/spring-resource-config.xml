<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 引入外部的属性文件 -->
    <context:property-placeholder location="classpath:/jdbc.properties"/>

    <context:component-scan base-package="cn.edu.tju.scs">
        <!--<context:exclude-filter type="regex" expression="cn.edu.tju.scs.web.*"></context:exclude-filter>-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>


    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true"/>


    <!-- 数据源 -->
    <!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${connection.url}"/>
        <property name="username" value="${connection.username}"/>
        <property name="password" value="${connection.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />

    </bean>

    <!-- 配置SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <!-- 指定数据库方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!--根据需要自动创建数据表--><!-- DB schema will be updated if needed -->
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
                <!-- 显示hibernate 持久化生成的SQL -->
                <prop key="hibernate.show_sql">true</prop>
                <!-- 将sql脚本进行格式化后再输出 -->
                <prop key="hibernate.format_sql">true</prop>
                <!--<prop key="hibernate.connection.url">${jdbc.username}</prop>-->
                <!--<prop key="hibernate.connection.driver_class">${jdbc.driverClass}</prop>-->
                <!-- 数据库事务不自动提高 -->
                <prop key="hibernate.connection.autocommit">false</prop>
            </props>
        </property>
        <!--<property name="configLocations">-->
        <!--<list>-->
        <!--<value>-->
        <!--classpath*:hibernate.cfg.xml-->
        <!--</value>-->
        <!--</list>-->
        <!--</property>-->
        <!--<property name="annotatedClasses">-->
            <!--<list>-->
                <!--<value>cn.edu.tju.cas.entity.GroupEntity</value>-->
                <!--<value>cn.edu.tju.cas.entity.SystemEntity</value>-->
                <!--<value>cn.edu.tju.cas.entity.GroupFormEntity</value>-->
                <!--<value>cn.edu.tju.cas.entity.UserGroupApplyEntity</value>-->
                <!--<value>cn.edu.tju.cas.entity.UserGroupFormValueEntity</value>-->
                <!--<value>cn.edu.tju.cas.entity.UserEntity</value>-->
            <!--</list>-->
        <!--</property>-->
        <property name="mappingLocations">
            <list>
                <value>classpath:hibernate/Video.hbm.xml</value>
                <value>classpath:hibernate/Comment.hbm.xml</value>
                <value>classpath:hibernate/Collection.hbm.xml</value>
                <value>classpath:hibernate/LocalAuth.hbm.xml</value>
                <value>classpath:hibernate/User.hbm.xml</value>
                <value>classpath:hibernate/Client.hbm.xml</value>
            </list>
        </property>
        <!--<property name="annotatedClasses">-->
        <!--<list>-->
        <!--<value>com.tgb.entity.User</value>-->
        <!--</list>-->
        <!--</property>-->
    </bean>

    <!-- 配置一个事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>


    <bean id="videoDao" class="cn.edu.tju.scs.resource.tv.dao.VideoDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="commentDao" class="cn.edu.tju.scs.resource.tv.dao.CommentDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="collectionDao" class="cn.edu.tju.scs.resource.tv.dao.CollectionDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>



    <bean id="localAuthDao" class="cn.edu.tju.scs.oauth2.dao.LocalAuthDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="userDao" class="cn.edu.tju.scs.oauth2.dao.UserDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="clientDao" class="cn.edu.tju.scs.oauth2.dao.ClientDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>



    <!--<bean id="passwordHelper" class="cn.edu.tju.scs.resource.tv.util.PasswordHelper">-->
        <!--<property name="algorithmName" value="md5"/>-->
        <!--<property name="hashIterations" value="2"/>-->
    <!--</bean>-->

    <!-- 配置一个事务的通知：（事务增强） -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--
                 propagation:事务的传播行为
                 isolation：事务的隔离级别
                 read-only:只读
                 rollback-for:发生哪些异常回滚
                 no-rollback-for:发生哪些异常不会滚
                 timeout:过期信息（-1）
             -->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置切面 -->
    <aop:config>
        <!-- 配置切入点,   +号代表子类 -->
        <aop:pointcut expression="execution(* cn.edu.tju.scs.resource.tv.service.impl.*.*(..))" id="pointCut1"/>
        <aop:pointcut expression="execution(* cn.edu.tju.scs.oauth2.service.impl.*.*(..))" id="pointCut2"/>
        <!-- 配置切面,advisor 一个切入点，一个通知;aspect 多个切入点，多个通知-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut1"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut2"/>
    </aop:config>


    <import resource="classpath:spring-config-cache.xml"/>
    <import resource="classpath:spring-config-shiro.xml"/>


    <!--&lt;!&ndash; 配置 c3p0 连接池 &ndash;&gt;-->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
    <!--&lt;!&ndash; 设置JDBC驱动名称 &ndash;&gt;-->
    <!--<property name="driverClass" value="${jdbc.driverClass}"></property>-->
    <!--&lt;!&ndash; 设置JDBC连接URL &ndash;&gt;-->
    <!--<property name="jdbcUrl" value="${jdbc.url}"></property>-->
    <!--&lt;!&ndash; 设置数据库用户名 &ndash;&gt;-->
    <!--<property name="user" value="${jdbc.username}"></property>-->
    <!--&lt;!&ndash; 设置数据库密码 &ndash;&gt;-->
    <!--<property name="password" value="${jdbc.password}"></property>-->

    <!--&lt;!&ndash; 最大连接数 &ndash;&gt;-->
    <!--<property name="maxPoolSize" value="${dataSource.c3p0.max_size}"/>-->

    <!--&lt;!&ndash; 最小连接数 &ndash;&gt;-->
    <!--<property name="minPoolSize" value="${dataSource.c3p0.min_size}"/>-->


    <!--&lt;!&ndash; 最大空闲时间，超时未被使用则连接被抛弃，单位毫秒 &ndash;&gt;-->
    <!--<property name="maxIdleTime" value="${dataSource.c3p0.max_idle_time}"/>-->

    <!--&lt;!&ndash; 最大的PreparedStatement的数量 &ndash;&gt;-->
    <!--<property name="maxStatements" value="${dataSource.c3p0.max_statements}"/>-->

    <!--&lt;!&ndash; 每隔120秒检查连接池里的空闲连接 ，单位是秒 &ndash;&gt;-->
    <!--<property name="idleConnectionTestPeriod" value="${dataSource.c3p0.idle_test_period}"/>-->

    <!--&lt;!&ndash; 当连接池里面的连接用完的时候，C3P0一下获取的新的连接数 &ndash;&gt;-->
    <!--<property name="acquireIncrement" value="${dataSource.c3p0.acquire_increment}"/>-->

    <!--</bean>-->


</beans>
